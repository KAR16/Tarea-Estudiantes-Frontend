@page "/v_estudiante"
@using AppEstudiantes.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Fomulario de Estudiantes</h1>

@if (getEstudianteError || iestudiantes is null)
{
    <p>No se encontro la api.</p>
}
else
{
    <form>
        <label for="lbl_carnet" class="form-label">Carnet</label>
        <input @bind="var_carnet" type="text" class="form-control" pattern="[E]{1}[0-9]{3}" placeholder="Ejemplo: E001" required>

        <label for="lbl_nombres" class="form-label">Nombres</label>
        <input @bind="var_nombres" type="text" class="form-control" placeholder="Ejemplo: Nombre 1  Nombre 2" required>

        <label for="lbl_apellidos" class="form-label">Apellidos</label>
        <input @bind="var_apellidos" type="text" class="form-control" placeholder="Ejemplo: Apellido 1  Apellido 2" required>

        <label for="lbl_direccion" class="form-label">Direccion</label>
        <input @bind="var_direccion" type="text" class="form-control" placeholder="Ejemplo: #casa calle avenida lugar" required>

        <label for="lbl_telefono" class="form-label">Telefono</label>
        <input @bind="var_telefono" type="text" class="form-control" placeholder="Ejemplo: 5555222" required>

        <label for="lbl_correo" class="form-label">Correo Electr√≥nico</label>
        <input @bind="var_correo" type="email" class="form-control" placeholder="Ejemplo: k@gmail.com" required>

        <label for="lbl_id_ts" class="form-label">Tipo de Sangre</label>
        <select @bind="var_idtiposangre" class="form-control" aria-label="Default select example" required>
            <option selected>Select an option</option>
            <option value="1">A+</option>
            <option value="2">O+</option>
            <option value="3">B+</option>
            <option value="4">AB+</option>
            <option value="5">A+</option>
            <option value="6">O+</option>
            <option value="7">B+</option>
            <option value="8">AB+</option>
        </select>

        <label for="lbl_fn" class="form-label">Fecha Nacimiento</label>
        <input @bind="var_fn" type="date" class="form-control" placeholder="YYYY-MM-dd" required>
        <br>
        <button type="button" @onclick="Crear" class="btn btn-info">Crear</button>
        <button type="button" @onclick="Actualizar" class="btn btn-success">Modificar </button>
        <button type="button" @onclick="Eliminar" class="btn btn-danger">Eliminar</button>

    </form>

    <table class="table">
        <tbody>
            <tr>
                <th></th>
                <th>Carnet</th>
                <th>Nombres</th>
                <th>Apellidos</th>
                <th>Direccion</th>
                <th>Telefono</th>
                <th>Correo Electronico</th>
                <th>Tipo de Sangre</th>
                <th>Fecha Nacimiento</th>
            </tr>
        </tbody>
        @foreach (var estudiante in iestudiantes)
        {
            <tr>
                <td><button type="button"@onclick="(() => enviarParametros(estudiante.Id_estudiante,estudiante.Carnet,estudiante.Nombres,estudiante.Apellidos,estudiante.Direccion,estudiante.Telefono,estudiante.Correo_electronico,estudiante.Id_tipo_sangre,estudiante.Fecha_nacimiento))"
                        class="btn btn-info"><i class="oi oi-pencil"></i></button></td>
                <td>@estudiante.Carnet</td>
                <td>@estudiante.Nombres</td>
                <td>@estudiante.Apellidos</td>
                <td>@estudiante.Direccion</td>
                <td>@estudiante.Telefono</td>
                <td>@estudiante.Correo_electronico</td>
                <td>@estudiante.Id_tipo_sangre</td>
                <td>@estudiante.Fecha_nacimiento</td>
            </tr>
        }
    </table>
}

@code {
    private string? url = "https://localhost:7134/api/Estudiantes";
    private Int32 var_idestudiante, var_idtiposangre;
    private string? var_carnet, var_nombres, var_apellidos, var_direccion, var_telefono, var_correo;
    private DateTime? var_fn;
    // Enviar Parametros a variables locales
    void enviarParametros(Int32 id, string? carnet, string? nom, string? ape, string? dir, string? tel, string? correo, Int32 id_ts, DateTime? f)
    {
        var_idestudiante = id;
        var_carnet = carnet;
        var_nombres = nom;
        var_apellidos = ape;
        var_direccion = dir;
        var_telefono = tel;
        var_correo = correo;
        var_idtiposangre = id_ts;
        var_fn = f;

        Console.WriteLine(var_apellidos);
    }

    void limpiarCampos(){
        DateTime date1 = new DateTime(1990, 1, 1, 19, 27, 15);

        var_idestudiante = 0;
        var_carnet = "";
        var_nombres = "";
        var_apellidos = "";
        var_direccion = "";
        var_telefono = "";
        var_correo = "";
        var_idtiposangre = 0;
        var_fn = date1;
    }

    // Crear
    private async Task Crear()
    {
        var client = ClientFactory.CreateClient();
        var addItem = new Estudiante
            {
                Carnet = var_carnet,
                Nombres = var_nombres,
                Apellidos = var_apellidos,
                Direccion = var_direccion,
                Telefono = var_telefono,
                Correo_electronico = var_correo,
                Id_tipo_sangre = var_idtiposangre,
                Fecha_nacimiento = var_fn
            };
        await client.PostAsJsonAsync(url, addItem);

        await OnInitializedAsync();

        limpiarCampos();
    }
    // Actualizar
    private async Task Actualizar()
    {
        var client = ClientFactory.CreateClient();
        var addItem = new Estudiante
            {
                Id_estudiante = var_idestudiante,
                Carnet = var_carnet,
                Nombres = var_nombres,
                Apellidos = var_apellidos,
                Direccion = var_direccion,
                Telefono = var_telefono,
                Correo_electronico = var_correo,
                Id_tipo_sangre = var_idtiposangre,
                Fecha_nacimiento = var_fn
            };
        await client.PutAsJsonAsync($"{url}/{var_idestudiante}", addItem);
        //url/var_idcliente
        // https://localhost:7094/api/Clientes/1
        await OnInitializedAsync();

        limpiarCampos();
    }
    // Eliminar
    private async Task Eliminar()
    {
        var client = ClientFactory.CreateClient();
        await client.DeleteAsync($"{url}/{var_idestudiante}");
        //url/var_idcliente
        // https://localhost:7094/api/Clientes/1
        await OnInitializedAsync();

        limpiarCampos();
    }
    private IEnumerable<Estudiante>? iestudiantes = Array.Empty<Estudiante>();
    private bool getEstudianteError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
        url);
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            iestudiantes = await JsonSerializer.DeserializeAsync
            <IEnumerable<Estudiante>>(responseStream);
        }
        else
        {
            getEstudianteError = true;
        }

        shouldRender = true;
    }


}